import React from "react"

import Head from "next/head"
import {
  Box,
  ButtonBase,
  CircularProgress,
  Modal,
  Paper,
  TablePagination,
  Typography
} from "@mui/material"

import Image from "next/image"
import TuringIcon from "../public/tlogo.png"
import { AuthContext } from "../src/context/authContext"
import { useRouter } from "next/router"
import {
  useGetCallsQuery,
  useUpdateArchiveMutation
} from "../src/store/services/api"
import { NodesProps } from "../src/types/type"
import NoteDetail from "../src/components/NotesDetail"
import TableContainerF from "../src/components/TableContainer"
import Filter from "../src/components/Filter"

const columns: string[] = [
  "CALL TYPE",
  "DIRECTION",
  "DURATION",
  "FROM",
  "TO",
  "VIA",
  "CREATED AT",
  "STATUS",
  "ACTIONS"
]

export default function Home() {
  const router = useRouter()

  const [page, setPage] = React.useState(0)
  const [filterBy, setFilterBy] = React.useState("all")
  const [detailModalOpen, setDetailModalOpen] = React.useState(false)
  const [currentNode, setCurrentNode] = React.useState({} as NodesProps)
  const authContext = React.useContext(AuthContext)

  //RTK queries calls
  const { data, isLoading } = useGetCallsQuery({
    token: authContext.authState.token,
    page
  })
  const [toggleArchive, { error }] = useUpdateArchiveMutation()
  const filteredData = React.useMemo(() => {
    if (!data) return []
    if (filterBy === "archived") {
      return data.nodes.filter(call => call.is_archived)
    } else if (filterBy === "unarchived") {
      return data.nodes.filter(call => !call.is_archived)
    } else {
      return data.nodes
    }
  }, [filterBy, data?.nodes])

  React.useEffect(() => {
    authContext.isUserAuthenticated() ? router.push("/") : router.push("/login")
  }, [authContext.isUserAuthenticated(), page])

  if (isLoading)
    return (
      <Box sx={{ display: "flex" }}>
        <CircularProgress />
      </Box>
    )

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage)
  }

  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilterBy(e.target.value)
  }

  const handleToggleArchieve = (id: string) => {
    toggleArchive({ id, token: authContext.authState.token }).then(res => {
      if (error) {
        console.log(error)
      }
    })
  }
  return (
    <>
      <Head>
        <title>Turing Technologies</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/tlogo.png" />
      </Head>
      <main>
        <Modal
          open={detailModalOpen}
          onClose={() => {
            setDetailModalOpen(false)
          }}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <NoteDetail currentNode={currentNode} />
        </Modal>
        <Box
          sx={{
            p: "1rem",
            backgroundColor: "white",
            display: "flex",
            justifyContent: "space-between",
            boxShadow: "0px 0px 8px 2px gray"
          }}
        >
          <Image src={TuringIcon} width={400} height={50} alt="TuringICon" />
          <ButtonBase
            onClick={authContext.logout}
            sx={{
              backgroundColor: "#4F45F8",
              borderRadius: "10px",
              color: "white",
              p: "1rem"
            }}
          >
            Log out
          </ButtonBase>
        </Box>
        <Typography
          component="h1"
          sx={{ p: "3rem", color: "gray" }}
          variant="h3"
        >
          Turing Technologies Front End Test
        </Typography>
        <Filter filterBy={filterBy} handleFilterChange={handleFilterChange} />
        <Paper sx={{ width: "100%" }}>
          {data && (
            <TableContainerF
              columns={columns}
              data={filteredData}
              handleToggleArchieve={handleToggleArchieve}
              setDetailModalOpen={setDetailModalOpen}
              setCurrentNode={setCurrentNode}
            />
          )}
          {data && data.nodes && data.nodes.length && (
            <TablePagination
              component="div"
              count={data.totalCount}
              rowsPerPage={data.nodes.length}
              page={page}
              onPageChange={handleChangePage}
            />
          )}
        </Paper>
      </main>
    </>
  )
}
